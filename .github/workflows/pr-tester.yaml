name: PR Quality Gate Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      base_branch:
        description: 'The source branch to check for'
        required: false
        default: ''
      target_branch:
        description: 'The target branch to check against'
        required: false
        default: 'main'
      min_approvals:
        description: 'Minimum number of approvals required'
        required: false
        default: '1'
      critical_checks:
        description: 'Comma-separated list of critical check names that must pass'
        required: false
        default: ''

permissions:
  contents: read
  pull-requests: read

jobs:
  check-base-branch:
    name: Direct Ancestor Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if branch is up to date with base
        shell: bash
        run: |
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          TARGET_BRANCH="${{ inputs.target_branch || 'main' }}"
          
          git fetch origin $TARGET_BRANCH
          
          BASE_SHA=$(git rev-parse refs/remotes/origin/$TARGET_BRANCH)
          MERGE_BASE=$(git merge-base refs/remotes/origin/$TARGET_BRANCH HEAD)
          
          if [[ "$BASE_SHA" != "$MERGE_BASE" ]]; then
            # Count how many commits behind the PR branch is
            COMMIT_COUNT=$(git rev-list --count $MERGE_BASE..$BASE_SHA)
            
            echo "::error::Your branch is not based on the latest commit of $TARGET_BRANCH."
            echo "::error::Your branch is $COMMIT_COUNT commit(s) behind the target branch."
            echo "::error::Please rebase your branch on the latest $TARGET_BRANCH commit."
            exit 1
          else
            echo "âœ… Branch is up-to-date with the latest $TARGET_BRANCH commit."
          fi

  check-approvals:
    name: Approval Status Check
    runs-on: ubuntu-latest
    steps:
      - name: Check PR approvals
        id: check-approvals
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
          MIN_APPROVALS: ${{ inputs.min_approvals || 1 }}
        run: |
          # Debug information
          echo "Repository: $REPO"
          echo "PR Number: $PR_NUMBER"
          
          # Check if PR_NUMBER is available when running from workflow_dispatch
          if [[ -z "$PR_NUMBER" ]]; then
            echo "::warning::Cannot check approvals: No PR number found (workflow may have been triggered manually)"
            echo "Skipping approval check"
            exit 0
          fi
          
          # Get review information using GitHub API
          REVIEWS=$(gh api \
            repos/$REPO/pulls/$PR_NUMBER/reviews \
            --jq '[.[] | select(.state == "APPROVED")]' || echo '[]')
          
          # Count the number of approved reviews
          APPROVAL_COUNT=$(echo $REVIEWS | jq 'length')
          
          echo "Current approval count: $APPROVAL_COUNT (minimum required: $MIN_APPROVALS)"
          
          if [[ $APPROVAL_COUNT -lt $MIN_APPROVALS ]]; then
            echo "::error::This PR requires at least $MIN_APPROVALS approval(s) to pass this check."
            echo "::error::Current approval count: $APPROVAL_COUNT"
            exit 1
          else
            echo "PR has sufficient approvals ($APPROVAL_COUNT/$MIN_APPROVALS)"
          fi
